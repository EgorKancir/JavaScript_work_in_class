{"version":3,"sources":["src/index.js"],"names":["hourses","raceCounter","refs","startBtn","document","querySelector","winnerField","progressField","tableBody","onStart","promises","map","run","updateWinnerField","updateProgressField","deterWinner","waitAll","hoursesP","Promise","race","then","_ref","hourse","time","concat","updateResultsTable","all","message","textContent","_ref2","tr","insertAdjacentHTML","resolve","getRondomTime","setTimeout","min","max","Math","floor","random","addEventListener"],"mappings":";AAmIA,IAAMA,EAAU,CAAC,QAAS,SAAU,WAAY,SAAU,YACtDC,EAAc,EACZC,EAAO,CACTC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAKtC,SAASI,IACLR,GAAe,EACf,IAAMS,EAAWV,EAAQW,IAAIC,GAC7BC,EAAkB,IAClBC,EAAoB,2CACpBC,EAAYL,GACZM,EAAQN,GAGZ,SAASK,EAAYE,GACjBC,QAAQC,KAAKF,GAAUG,KAAK,SAAAC,GAAoB,IAAlBC,EAAMD,EAANC,OAAQC,EAAIF,EAAJE,KAClCV,EAAiBW,cAAAA,OAAeF,EAAME,mBAAAA,OAAkBD,EAAO,MAC/DE,EAAmB,CAACH,OAAAA,EAAQC,KAAAA,EAAMtB,YAAAA,MAI1C,SAASe,EAAQC,GACbC,QAAQQ,IAAIT,GAAUG,KAAK,WACvBN,EAA2D,2CAMnE,SAASD,EAAkBc,GACvBzB,EAAKI,YAAYsB,YAAcD,EAEnC,SAASb,EAAoBa,GACzBzB,EAAKK,cAAcqB,YAAcD,EAGrC,SAASF,EAAkBI,GAA8B,IAA5BP,EAAMO,EAANP,OAAQC,EAAIM,EAAJN,KAAMtB,EAAW4B,EAAX5B,YACjC6B,EAAEN,2BAAAA,OAEEvB,EAAWuB,uBAAAA,OACXF,EAAME,uBAAAA,OACND,EAET,0BACDrB,EAAKM,UAAUuB,mBAAmB,YAAaD,GAKnD,SAASlB,EAAIU,GACT,OAAO,IAAIJ,QAAQ,SAAAc,GACf,IAAMT,EAAOU,EAAc,IAAM,MACjCC,WAAW,WACPF,EAAQ,CAACV,OAAAA,EAAQC,KAAAA,KAClBA,KAIX,SAASU,EAAcE,EAAKC,GACxB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAxDxDjC,EAAKC,SAASqC,iBAAiB,QAAS/B","file":"src.878f2f42.js","sourceRoot":"..","sourcesContent":["// all();\n\n\n// const one = (text, delay) => {\n//     return new Promise(resolve => {\n//         setTimeout(() => {\n//             resolve(text);\n//         }, delay);\n//     })\n// }\n\n// const promiseA = one('Promise one', 1000);\n// const promiseB = one('Promise two', 2000);\n\n// Promise.all([promiseA, promiseB])\n//     .then(value => {console.log(value)})\n//     .catch(error => {console.error(error)});\n\n\n// race();\n\n\n// const one = (text, delay) => {\n//     return new Promise(resolve => {\n//         setTimeout(() => {\n//             resolve(text);\n//         }, delay);\n//     })\n// }\n\n// const promiseA = one(\"First promise\", 3000);\n// const promiseB = one(\"Second promise\", 1500);\n\n// Promise.race([promiseA, promiseB])\n//     .then(value => {console.log(value)})\n//     .catch(error => console.error(error)); //Second promise\n\n\n// any();\n\n\n// Promise.any([\n//     new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             reject(new Error(\"Помилка!\"));\n//         }, 1000);\n//     }),\n//     new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             resolve(1);\n//         }, 2000);\n//     }),\n//     new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             resolve(3);\n//         }, 2000);\n//     })\n// ])\n//     .then(alert);\n\n// Promise.any([\n//     new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             reject(new Error(\"Помилка!\"));\n//         }, 1000);\n//     }),\n//     new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             reject(new Error(\"Проблем!\"));\n//         }, 2000);\n//     }),\n//     new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             reject(new Error(\"Не туди!\"));\n//         }, 4000);\n//     }),\n// ])\n//     .catch(error => {\n//         console.log(error.constructor.name), \n//         console.log(error.errors[0]), \n//         console.log(error.errors[2])\n//     });\n\n\n// resolve(); reject();\n\n\n// new Promise(resolve => resolve('success')).then(value => console.log(value));\n// Promise.resolve(\"seccess\").then(value => console.log(value));\n\n// new Promise((resolve, reject) => {\n//     reject('error');\n// }).catch(error => {console.error(error)});\n// Promise.reject('error').catch(error => {console.error(error)});\n\n// const makeGreeting = guestName => {\n//     if (guestName === '' || guestName === undefined) {\n//         return {\n//             success: false,\n//             message: \"Guest name is not found\"\n//         }\n//     }\n//     return { \n//         success: true,\n//         message: `Welcome ${guestName}`\n//     }\n// }\n\n// const result = makeGreeting('Bob');\n\n// if (result.success) {\n//     console.log(result.message);\n// } else {\n//     console.log(result.message);\n// }\n\n\n// const makeGreeting = guestName => {\n//     if (guestName === '' || guestName === undefined) {\n//         return Promise.reject(\"Guest name is not found\");\n//     }\n//     return Promise.resolve(`Welcome ${guestName}`);\n// }\n\n// makeGreeting('Bob')\n//     .then(greeting => console.log(greeting))\n//     .catch(error => console.error(error));\n\n\n// EX\n\nconst hourses = [\"Milka\", \"Zorita\", \"Lastunka\", \"Rariti\", \"PinkiPay\"];\nlet raceCounter = 0;\nconst refs = {\n    startBtn: document.querySelector(\".js-start-race\"),\n    winnerField: document.querySelector(\".js-winner\"),\n    progressField: document.querySelector(\".js-progress\"),\n    tableBody: document.querySelector(\".js-results-table > tbody\"),\n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() {\n    raceCounter += 1;\n    const promises = hourses.map(run);\n    updateWinnerField('');\n    updateProgressField('Заїзд розпочався ставки не приймаються!');\n    deterWinner(promises);\n    waitAll(promises);\n}\n\nfunction deterWinner(hoursesP) {\n    Promise.race(hoursesP).then(({hourse, time}) => {\n        updateWinnerField(`Переможець ${hourse}, фінішував за ${time}!`);\n        updateResultsTable({hourse, time, raceCounter});\n    });\n}\n\nfunction waitAll(hoursesP) {\n    Promise.all(hoursesP).then(() => {\n        updateProgressField(`Заїзд закінчино ставки не приймаются!`);\n    })\n}\n\n////////////////////////////////////////////////\n\nfunction updateWinnerField(message) {\n    refs.winnerField.textContent = message;\n}\nfunction updateProgressField(message) {\n    refs.progressField.textContent = message;\n}\n\nfunction updateResultsTable({hourse, time, raceCounter}) {\n    const tr = `\n    <tr>\n        <td>${raceCounter}</td>\n        <td>${hourse}</td>\n        <td>${time}</td>\n    </tr>\n    `;\n    refs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n\n////////////////////////////////////////////////\n\nfunction run(hourse) {\n    return new Promise(resolve => {\n        const time = getRondomTime(2000, 3500);\n        setTimeout(() => {\n            resolve({hourse, time});\n        }, time);\n    })\n}\n\nfunction getRondomTime(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}"]}